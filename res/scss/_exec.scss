/* 
    Created on : Jun 8, 2015, 2:59:16 PM
    Author     : mzijlstra
*/

.exec #controls {
    #reset {
        color: $fg;
    }
    #reset:hover {
        color: red;
    }
}

// pointer on all elements while executing is always default
.exec .del, .exec .connection {
    cursor: default !important;
}

// delete and menu items should not apear while executing
.exec div:hover .del, .exec div:hover .menu {
    display: none !important;
}
.exec .type_container:hover .type {
    border: none;
}

// connection element
.exec .executing.connection { 
    div.line, div.sline {
        border-color: $exec;
    }
    div.arrow_down {
        border-top-color: $exec;
    }
}

// border color for basic statements
.exec .executing .start,
.exec .executing .stop,
.exec div.statement span.executing,  // input, output, and assingment
.exec .executing.statement > .output > .exp, 
.exec .executing.statement > .assignment > .exp, 
.exec .executing.statement > .call > .exp,
.exec .asgn.executing
{
    border-color: $exec;
}
.exec .io.eval,
.exec .exp.eval, 
.exec .asgn.eval,
.exec div.statement .var.executing,
.exec .params.executing 
{
    color: $exec;
}
.exec .executing.statement > .input > .io,
.exec div.statement span.io.executing 
{
    border-color: $fg;
    background-color: $fg;
    color: $bg;
}


// during assignment the variable TR also gains 'executing'
#stack .data tr.executing {
    background-color: $fg;
    color: $bg;
}



// border color for if and while conditions
.exec .executing > div > .diamond > .diamond_top_outside {
    border-bottom-color: $exec;
}
.exec .executing > div > .diamond > .diamond_bot_outside {
    border-top-color: $exec;
}

// left and right branchs of the if statement
.exec .top_connect.executing,
.exec .absolute_right.executing,
.exec .absolute_left.executing,
.exec .bot_right_connect.executing,
.exec .bot_left_connect.executing
{
    border-color: $exec;
}
.exec .bot_left_connect.executing .arrow_left {
    border-right-color: $exec;
}

// while statement
.exec .false_line.executing,
.exec .true_connector.executing,
.exec .return_line.executing
{
    border-color: $exec;
}
.exec .return_line.executing .arrow_up {
    border-bottom-color: $exec;
}

// type_error and exp_error for if and while conditions
.statement.type_error > div > .diamond > .diamond_top_outside,
.statement.exp_error > div > .diamond > .diamond_top_outside {
    border-bottom-color: $error !important;
}
.statement.type_error > div > .diamond > .diamond_bot_outside,
.statement.exp_error > div > .diamond > .diamond_bot_outside {
    border-top-color: $error !important;
}
// name_error for input and assignment
.statement.name_error {
    .input, .assignment {
        .var {
            border-color: $error;
        }
    }
}
// type_error for output and assignment
.statement.type_error {
    .input .asgn,
    .assignment .asgn, 
    .output .asgn {
        color: $error;
    }
}
// exp_error for output and assignment
.statement.exp_error {
    .output .exp,
    .assignment .exp {
        border-color: $error !important;
    }
}
// type_error and exp_error for return statement
.statement.type_error .stop,
.statement.exp_error .stop,
.stop.type_error,
.stop.exp_error {
    border-color: $error !important;
}